"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const fileHandler_1 = require("./fileHandler");
const nativeAudioProcessor_1 = require("./nativeAudioProcessor");
const os_1 = __importDefault(require("os"));
function createWindow() {
    const win = new electron_1.BrowserWindow({
        width: 1280,
        height: 800,
        webPreferences: {
            contextIsolation: true,
            nodeIntegration: false,
            preload: path_1.default.join(__dirname, 'preload.js'),
            webSecurity: true,
            allowRunningInsecureContent: false,
        },
        show: false, // ÂàùÊúüÂåñÂÆå‰∫ÜÂæå„Å´Ë°®Á§∫
    });
    // „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåÊ∫ñÂÇôÂÆå‰∫Ü„Åó„Åü„ÇâË°®Á§∫
    win.once('ready-to-show', () => {
        win.show();
    });
    // „É°„É¢„É™‰ΩøÁî®Èáè„ÅÆÁõ£Ë¶ñ„Å®„Ç¨„Éô„Éº„Ç∏„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥Ôºà‰∏ÄÊôÇÁöÑ„Å´ÁÑ°ÂäπÂåñÔºâ
    /*
    const memoryMonitor = setInterval(() => {
      const memoryUsage = process.memoryUsage();
      const heapUsedMB = Math.round(memoryUsage.heapUsed / 1024 / 1024);
      const heapTotalMB = Math.round(memoryUsage.heapTotal / 1024 / 1024);
      
      // „É°„É¢„É™‰ΩøÁî®Èáè„ÅåÂ§ö„ÅÑÂ†¥Âêà„ÅØ„É≠„Ç∞Âá∫Âäõ
      if (heapUsedMB > 500) { // 500MB‰ª•‰∏ä„ÅßË≠¶Âëä
        console.warn('‚ö†Ô∏è „É°„É¢„É™‰ΩøÁî®Èáè„ÅåÂ§ö„Åè„Å™„Å£„Å¶„ÅÑ„Åæ„Åô:', {
          heapUsed: heapUsedMB + 'MB',
          heapTotal: heapTotalMB + 'MB',
          external: Math.round(memoryUsage.external / 1024 / 1024) + 'MB'
        });
      }
      
      // Ê•µÁ´Ø„Å´„É°„É¢„É™‰ΩøÁî®Èáè„ÅåÂ§ö„ÅÑÂ†¥Âêà„ÅØÂº∑Âà∂„Ç¨„Éô„Éº„Ç∏„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥
      if (heapUsedMB > 1000) { // 1GB‰ª•‰∏ä„ÅßÂº∑Âà∂GC
        if (global.gc) {
          global.gc();
          console.log('üóëÔ∏è Âº∑Âà∂„Ç¨„Éô„Éº„Ç∏„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÇíÂÆüË°å„Åó„Åæ„Åó„Åü');
        }
      }
    }, 30000); // 30ÁßíÈñìÈöî„ÅßÁõ£Ë¶ñ
  
    // „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅåÈñâ„Åò„Çâ„Çå„ÇãÈöõ„Å´„É°„É¢„É™Áõ£Ë¶ñ„ÇíÂÅúÊ≠¢
    win.on('closed', () => {
      clearInterval(memoryMonitor);
    });
    */
    if (process.env.NODE_ENV === 'development') {
        // ÈñãÁô∫„É¢„Éº„Éâ„ÅØ Vite Dev „Çµ„Éº„Éê„Éº„Å´Êé•Á∂ö
        win.loadURL('http://localhost:9000/');
    }
    else {
        // „Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥„Éì„É´„Éâ„ÅØ index.html „ÇíË™≠„ÅøËæº„ÇÄ
        const indexPath = path_1.default.join(__dirname, 'index.html');
        win.loadFile(indexPath);
    }
    // Â§ñÈÉ®„É™„É≥„ÇØ„ÅØ„Éá„Éï„Ç©„É´„Éà„Éñ„É©„Ç¶„Ç∂„ÅßÈñã„Åè
    win.webContents.setWindowOpenHandler(({ url }) => {
        electron_1.shell.openExternal(url);
        return { action: 'deny' };
    });
}
// IPC„Éè„É≥„Éâ„É©„Éº„ÇíË®≠ÂÆö
electron_1.ipcMain.handle('get-corporate-config', () => {
    try {
        const configPath = path_1.default.join(process.cwd(), 'corporate-config.json');
        if (fs_1.default.existsSync(configPath)) {
            const configData = fs_1.default.readFileSync(configPath, 'utf8');
            return JSON.parse(configData);
        }
        return null;
    }
    catch (error) {
        console.warn('‰ºÅÊ•≠Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:', error);
        return null;
    }
});
electron_1.ipcMain.handle('get-app-path', () => {
    return process.cwd();
});
// Êó•Êú¨Ë™û„É°„Éã„É•„Éº„ÉÜ„É≥„Éó„É¨„Éº„Éà
const createMenuTemplate = () => {
    const template = [
        {
            label: '„Éï„Ç°„Ç§„É´',
            submenu: [
                {
                    label: 'Êñ∞Ë¶è‰ΩúÊàê',
                    accelerator: 'CmdOrCtrl+N',
                    click: () => {
                        createWindow();
                    }
                },
                {
                    label: 'Èñã„Åè',
                    accelerator: 'CmdOrCtrl+O',
                    // „Éï„Ç°„Ç§„É´ÈÅ∏Êäû„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈñã„ÅèÂá¶ÁêÜ„ÅØÂ∞ÜÊù•ÂÆüË£Ö
                },
                { type: 'separator' },
                {
                    label: 'ÁµÇ‰∫Ü',
                    accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
                    click: () => {
                        electron_1.app.quit();
                    }
                }
            ]
        },
        {
            label: 'Á∑®ÈõÜ',
            submenu: [
                {
                    label: 'ÂÖÉ„Å´Êàª„Åô',
                    accelerator: 'CmdOrCtrl+Z',
                    role: 'undo'
                },
                {
                    label: '„ÇÑ„ÇäÁõ¥„Åó',
                    accelerator: 'Shift+CmdOrCtrl+Z',
                    role: 'redo'
                },
                { type: 'separator' },
                {
                    label: 'Âàá„ÇäÂèñ„Çä',
                    accelerator: 'CmdOrCtrl+X',
                    role: 'cut'
                },
                {
                    label: '„Ç≥„Éî„Éº',
                    accelerator: 'CmdOrCtrl+C',
                    role: 'copy'
                },
                {
                    label: 'Ë≤º„Çä‰ªò„Åë',
                    accelerator: 'CmdOrCtrl+V',
                    role: 'paste'
                },
                {
                    label: '„Åô„Åπ„Å¶ÈÅ∏Êäû',
                    accelerator: 'CmdOrCtrl+A',
                    role: 'selectAll'
                }
            ]
        },
        {
            label: 'Ë°®Á§∫',
            submenu: [
                {
                    label: 'ÂÜçË™≠„ÅøËæº„Åø',
                    accelerator: 'CmdOrCtrl+R',
                    click: (item, focusedWindow) => {
                        if (focusedWindow) {
                            focusedWindow.reload();
                        }
                    }
                },
                {
                    label: 'Âº∑Âà∂ÂÜçË™≠„ÅøËæº„Åø',
                    accelerator: 'CmdOrCtrl+Shift+R',
                    click: (item, focusedWindow) => {
                        if (focusedWindow) {
                            focusedWindow.webContents.reloadIgnoringCache();
                        }
                    }
                },
                {
                    label: 'ÈñãÁô∫ËÄÖ„ÉÑ„Éº„É´',
                    accelerator: process.platform === 'darwin' ? 'Alt+Cmd+I' : 'Ctrl+Shift+I',
                    click: (item, focusedWindow) => {
                        if (focusedWindow) {
                            focusedWindow.webContents.toggleDevTools();
                        }
                    }
                },
                { type: 'separator' },
                {
                    label: 'ÂÆüÈöõ„ÅÆ„Çµ„Ç§„Ç∫',
                    accelerator: 'CmdOrCtrl+0',
                    role: 'resetZoom'
                },
                {
                    label: 'Êã°Â§ß',
                    accelerator: 'CmdOrCtrl+Plus',
                    role: 'zoomIn'
                },
                {
                    label: 'Á∏ÆÂ∞è',
                    accelerator: 'CmdOrCtrl+-',
                    role: 'zoomOut'
                },
                { type: 'separator' },
                {
                    label: 'ÂÖ®ÁîªÈù¢Ë°®Á§∫',
                    accelerator: process.platform === 'darwin' ? 'Ctrl+Cmd+F' : 'F11',
                    role: 'togglefullscreen'
                }
            ]
        },
        {
            label: '„Ç¶„Ç£„É≥„Éâ„Ç¶',
            submenu: [
                {
                    label: 'ÊúÄÂ∞èÂåñ',
                    accelerator: 'CmdOrCtrl+M',
                    role: 'minimize'
                },
                {
                    label: 'Èñâ„Åò„Çã',
                    accelerator: 'CmdOrCtrl+W',
                    role: 'close'
                }
            ]
        },
        {
            label: '„Éò„É´„Éó',
            submenu: [
                {
                    label: 'MinutesGen„Å´„Å§„ÅÑ„Å¶',
                    click: () => {
                        electron_1.shell.openExternal('https://github.com/your-repo/minutesgen');
                    }
                },
                {
                    label: '„Éâ„Ç≠„É•„É°„É≥„Éà',
                    click: () => {
                        electron_1.shell.openExternal('https://github.com/your-repo/minutesgen/docs');
                    }
                },
                { type: 'separator' },
                {
                    label: '„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±',
                    click: (item, focusedWindow) => {
                        if (focusedWindow) {
                            focusedWindow.webContents.executeJavaScript(`
                alert('MinutesGen v0.7.5\\nË≠∞‰∫ãÈå≤Ëá™ÂãïÁîüÊàê„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥');
              `);
                        }
                    }
                }
            ]
        }
    ];
    // macOS„ÅÆÂ†¥Âêà„ÄÅ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„É°„Éã„É•„Éº„ÇíËøΩÂä†
    if (process.platform === 'darwin') {
        template.unshift({
            label: 'MinutesGen',
            submenu: [
                {
                    label: 'MinutesGen„Å´„Å§„ÅÑ„Å¶',
                    click: () => {
                        electron_1.shell.openExternal('https://github.com/your-repo/minutesgen');
                    }
                },
                { type: 'separator' },
                {
                    label: '„Çµ„Éº„Éì„Çπ',
                    role: 'services'
                },
                { type: 'separator' },
                {
                    label: 'MinutesGen„ÇíÈö†„Åô',
                    accelerator: 'Command+H',
                    role: 'hide'
                },
                {
                    label: '„Åª„Åã„ÇíÈö†„Åô',
                    accelerator: 'Command+Shift+H',
                    role: 'hideOthers'
                },
                {
                    label: '„Åô„Åπ„Å¶Ë°®Á§∫',
                    role: 'unhide'
                },
                { type: 'separator' },
                {
                    label: 'MinutesGen„ÇíÁµÇ‰∫Ü',
                    accelerator: 'Command+Q',
                    click: () => {
                        electron_1.app.quit();
                    }
                }
            ]
        });
    }
    return template;
};
electron_1.app.whenReady().then(() => {
    // „Éï„Ç°„Ç§„É´„Éè„É≥„Éâ„É©„Éº„ÇíÂàùÊúüÂåñ
    (0, fileHandler_1.setupFileHandler)();
    // Êó•Êú¨Ë™û„É°„Éã„É•„Éº„ÇíË®≠ÂÆö
    const menu = electron_1.Menu.buildFromTemplate(createMenuTemplate());
    electron_1.Menu.setApplicationMenu(menu);
    createWindow();
    electron_1.app.on('activate', () => {
        if (electron_1.BrowserWindow.getAllWindows().length === 0) {
            createWindow();
        }
    });
});
electron_1.app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        electron_1.app.quit();
    }
});
// „Éç„Ç§„ÉÜ„Ç£„ÉñFFmpeg„ÅÆIPCÈÄö‰ø°„Éè„É≥„Éâ„É©„Éº
let nativeAudioProcessor = null;
// Èü≥Â£∞Âá¶ÁêÜ„ÅÆÂàùÊúüÂåñ
electron_1.ipcMain.handle('audio-processor-initialize', async (event, progressCallback) => {
    console.log('üéµ IPC: audio-processor-initialize');
    try {
        if (!nativeAudioProcessor) {
            console.log('üîÑ Êñ∞„Åó„ÅÑNativeAudioProcessor„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê');
            nativeAudioProcessor = new nativeAudioProcessor_1.NativeAudioProcessor();
        }
        await nativeAudioProcessor.initialize((progress) => {
            console.log('üìä ÈÄ≤ÊçóÈÄöÁü•:', progress.currentTask);
            event.sender.send('audio-processor-progress', progress);
        });
        console.log('‚úÖ IPC: audio-processor-initialize ÊàêÂäü');
        return { success: true };
    }
    catch (error) {
        console.error('‚ùå IPC: audio-processor-initialize „Ç®„É©„Éº:', error);
        const errorMessage = error instanceof Error ? error.message : 'ÂàùÊúüÂåñ„Ç®„É©„Éº';
        return { success: false, error: errorMessage };
    }
});
// Â§ßÂÆπÈáèÈü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆÂá¶ÁêÜ
electron_1.ipcMain.handle('audio-processor-process-file', async (event, filePath, segmentDuration = 600) => {
    console.log('üéµ IPC: audio-processor-process-file', { filePath, segmentDuration });
    if (!nativeAudioProcessor) {
        console.error('‚ùå Èü≥Â£∞Âá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        return { success: false, error: 'Èü≥Â£∞Âá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' };
    }
    try {
        const segments = await nativeAudioProcessor.processLargeAudioFile(filePath, segmentDuration, (progress) => {
            console.log('üìä Âá¶ÁêÜÈÄ≤Êçó:', progress.currentTask);
            event.sender.send('audio-processor-progress', progress);
        });
        console.log(`‚úÖ Èü≥Â£∞Âá¶ÁêÜÂÆå‰∫Ü: ${segments.length}ÂÄã„ÅÆ„Çª„Ç∞„É°„É≥„Éà`);
        // „Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÁõ¥Êé•ÈÄÅ‰ø°Ôºà„É°„É¢„É™ÂäπÁéáÂåñÔºâ
        const segmentPaths = segments.map(segment => ({
            filePath: segment.filePath,
            name: segment.name,
            duration: segment.duration,
            startTime: segment.startTime,
            endTime: segment.endTime,
        }));
        console.log('‚úÖ IPC: audio-processor-process-file ÊàêÂäü');
        return { success: true, segments: segmentPaths };
    }
    catch (error) {
        console.error('‚ùå IPC: audio-processor-process-file „Ç®„É©„Éº:', error);
        const errorMessage = error instanceof Error ? error.message : 'Âá¶ÁêÜ„Ç®„É©„Éº';
        return { success: false, error: errorMessage };
    }
});
// Èü≥Â£∞„ÅÆÈï∑„Åï„ÇíÂèñÂæó
electron_1.ipcMain.handle('audio-processor-get-duration', async (event, blobData, blobType) => {
    if (!nativeAudioProcessor) {
        return { success: false, error: 'Èü≥Â£∞Âá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' };
    }
    try {
        const blob = new Blob([Buffer.from(blobData, 'base64')], { type: blobType });
        const duration = await nativeAudioProcessor.getAudioDurationFromBlob(blob);
        return { success: true, duration };
    }
    catch (error) {
        return { success: false, error: error instanceof Error ? error.message : 'Èï∑„ÅïÂèñÂæó„Ç®„É©„Éº' };
    }
});
// „Çª„Ç∞„É°„É≥„Éà„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„ÅøÔºà„É°„É¢„É™ÂäπÁéáÂåñÔºâ
electron_1.ipcMain.handle('audio-processor-read-segment-file', async (event, filePath) => {
    console.log('üìÅ IPC: audio-processor-read-segment-file', { filePath });
    try {
        if (!fs_1.default.existsSync(filePath)) {
            throw new Error(`„Çª„Ç∞„É°„É≥„Éà„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${filePath}`);
        }
        const fileData = await fs_1.default.promises.readFile(filePath);
        const base64Data = fileData.toString('base64');
        console.log('‚úÖ IPC: audio-processor-read-segment-file ÊàêÂäü');
        return { success: true, data: base64Data };
    }
    catch (error) {
        console.error('‚ùå IPC: audio-processor-read-segment-file „Ç®„É©„Éº:', error);
        const errorMessage = error instanceof Error ? error.message : '„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº';
        return { success: false, error: errorMessage };
    }
});
// „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
electron_1.ipcMain.handle('audio-processor-cleanup', async () => {
    if (nativeAudioProcessor) {
        try {
            await nativeAudioProcessor.cleanup();
            nativeAudioProcessor = null;
            return { success: true };
        }
        catch (error) {
            return { success: false, error: error instanceof Error ? error.message : '„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Ç®„É©„Éº' };
        }
    }
    return { success: true };
});
// ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÅÆ‰øùÂ≠ò
electron_1.ipcMain.handle('audio-processor-save-temp-file', async (event, fileName, arrayBufferData) => {
    console.log('üíæ IPC: audio-processor-save-temp-file', { fileName, dataSize: arrayBufferData.byteLength });
    try {
        // ‰∏ÄÊôÇ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
        const tempDir = path_1.default.join(os_1.default.tmpdir(), 'minutes-gen-audio');
        await fs_1.default.promises.mkdir(tempDir, { recursive: true });
        // ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÁîüÊàê
        const tempPath = path_1.default.join(tempDir, `${Date.now()}-${fileName}`);
        // ArrayBuffer„ÇíBuffer„Å´Â§âÊèõ„Åó„Å¶„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        const buffer = Buffer.from(arrayBufferData);
        await fs_1.default.promises.writeFile(tempPath, buffer);
        console.log('‚úÖ IPC: audio-processor-save-temp-file ÊàêÂäü', { tempPath });
        return { success: true, tempPath };
    }
    catch (error) {
        console.error('‚ùå IPC: audio-processor-save-temp-file „Ç®„É©„Éº:', error);
        const errorMessage = error instanceof Error ? error.message : '‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´‰øùÂ≠ò„Ç®„É©„Éº';
        return { success: false, error: errorMessage };
    }
});
// „Ç¢„Éó„É™ÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
electron_1.app.on('before-quit', async () => {
    if (nativeAudioProcessor) {
        await nativeAudioProcessor.cleanup();
    }
});
