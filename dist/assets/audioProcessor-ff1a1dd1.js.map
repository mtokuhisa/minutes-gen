{"version":3,"file":"audioProcessor-ff1a1dd1.js","sources":["../../src/services/audioProcessor.ts"],"sourcesContent":["// ===========================================\n// MinutesGen v0.7.5 - Audio Processor Service (FFmpeg.wasm)\n// 注意: この実装は段階的移行のため保持されています\n// 新しいプロジェクトではNativeAudioProcessorServiceを使用してください\n// ===========================================\n\n// FFmpegWasmが削除されたため、代替実装を提供\nimport { AudioFile, ProcessingProgress, AudioProcessorInterface, AudioSegment } from '../types';\n\n/**\n * FFmpegWasmの代替実装\n * WebCodecsProcessorを使用した簡易的な音声処理\n */\nexport class AudioProcessorService implements AudioProcessorInterface {\n  private isInitialized: boolean = false;\n\n  constructor() {\n    console.warn('⚠️ レガシーAudioProcessorServiceが使用されています。');\n    console.warn('パフォーマンスを向上させるため、Electron環境ではNativeAudioProcessorServiceの使用を推奨します。');\n  }\n\n  /**\n   * 音声処理システムを初期化\n   */\n  async initialize(onProgress?: (progress: ProcessingProgress) => void): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    onProgress?.({\n      stage: 'transcribing',\n      percentage: 5,\n      currentTask: 'レガシー音声処理システムを初期化中...',\n      estimatedTimeRemaining: 0,\n      logs: [{ \n        id: Date.now().toString(), \n        timestamp: new Date(), \n        level: 'warning', \n        message: 'レガシー音声処理システムを使用しています。性能向上のため、Electron環境での使用を推奨します。' \n      }],\n      startedAt: new Date(),\n    });\n\n    // 簡易的な初期化処理\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    this.isInitialized = true;\n\n    onProgress?.({\n      stage: 'transcribing',\n      percentage: 15,\n      currentTask: 'レガシー音声処理システムの初期化完了',\n      estimatedTimeRemaining: 0,\n      logs: [{ \n        id: Date.now().toString(), \n        timestamp: new Date(), \n        level: 'info', \n        message: 'レガシー音声処理システムの初期化が完了しました。' \n      }],\n      startedAt: new Date(),\n    });\n  }\n\n  /**\n   * 大容量音声ファイルを適切なセグメントに分割\n   */\n  async processLargeAudioFile(\n    file: AudioFile,\n    segmentDurationSeconds: number = 600,\n    onProgress?: (progress: ProcessingProgress) => void\n  ): Promise<AudioSegment[]> {\n    await this.initialize(onProgress);\n\n    if (!file.rawFile) {\n      throw new Error('音声ファイルが見つかりません');\n    }\n\n    // 大容量ファイルの処理制限を緩和 - 100MBまで対応\n    const maxSize = 100 * 1024 * 1024; // 100MB制限\n    if (file.rawFile.size > maxSize) {\n      const errorMessage = `\n大容量音声ファイル（${Math.round(file.rawFile.size / 1024 / 1024)}MB）の処理には、\nネイティブFFmpegの使用を強く推奨します。\n\n現在の制限:\n- レガシー処理: 最大100MB\n- ネイティブFFmpeg: 制限なし（数GB対応）\n\n解決方法:\n1. Electron環境でアプリを実行\n2. 環境変数 REACT_APP_USE_NATIVE_FFMPEG=true を設定\n3. より小さなファイルサイズで再試行\n      `.trim();\n      \n      throw new Error(errorMessage);\n    }\n\n    // メモリ効率を向上させるため、大きなファイルは警告を表示\n    if (file.rawFile.size > 50 * 1024 * 1024) { // 50MB以上で警告\n      console.warn('⚠️ 大容量ファイル処理中:', {\n        fileSize: Math.round(file.rawFile.size / 1024 / 1024) + 'MB',\n        recommendation: 'ネイティブFFmpegの使用を推奨'\n      });\n      \n      // ガベージコレクションを強制実行（可能な場合）\n      if (typeof window !== 'undefined' && window.gc) {\n        window.gc();\n      }\n    }\n\n    onProgress?.({\n      stage: 'transcribing',\n      percentage: 30,\n      currentTask: `音声ファイル（${Math.round(file.rawFile.size / 1024 / 1024)}MB）を処理中...`,\n      estimatedTimeRemaining: 0,\n      logs: [{ \n        id: Date.now().toString(), \n        timestamp: new Date(), \n        level: 'info', \n        message: 'レガシー処理でファイルを単一セグメントとして処理します。' \n      }],\n      startedAt: new Date(),\n    });\n\n    // 簡易的な処理: ファイル全体を1つのセグメントとして扱う\n    const duration = await this.getAudioDurationFromBlob(file.rawFile);\n    \n    const audioSegments: AudioSegment[] = [{\n      blob: file.rawFile,\n      name: 'segment_000.wav',\n      duration: duration,\n      startTime: 0,\n      endTime: duration,\n    }];\n\n    onProgress?.({\n      stage: 'transcribing',\n      percentage: 50,\n      currentTask: '音声ファイルの処理完了',\n      estimatedTimeRemaining: 0,\n      logs: [{ \n        id: Date.now().toString(), \n        timestamp: new Date(), \n        level: 'info', \n        message: `音声セグメント準備完了 (${Math.round(file.rawFile.size / 1024 / 1024)}MB)` \n      }],\n      startedAt: new Date(),\n    });\n\n    return audioSegments;\n  }\n\n  /**\n   * 音声長さを取得\n   */\n  async getAudioDurationFromBlob(blob: Blob): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const audio = new Audio();\n      const url = URL.createObjectURL(blob);\n      \n      audio.onloadedmetadata = () => {\n        URL.revokeObjectURL(url);\n        resolve(audio.duration || 0);\n      };\n      \n      audio.onerror = () => {\n        URL.revokeObjectURL(url);\n        reject(new Error('音声ファイルの長さを取得できませんでした'));\n      };\n      \n      audio.src = url;\n    });\n  }\n\n  /**\n   * リソースのクリーンアップ\n   */\n  async cleanup(): Promise<void> {\n    this.isInitialized = false;\n    console.log('レガシーAudioProcessorServiceのクリーンアップが完了しました。');\n  }\n}\n\n// 後方互換性のためのエクスポート\nexport const audioProcessor = new AudioProcessorService(); "],"names":["AudioProcessorService","onProgress","resolve","file","segmentDurationSeconds","maxSize","errorMessage","duration","audioSegments","blob","reject","audio","url","audioProcessor"],"mappings":"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"}